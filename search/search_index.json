{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"The-Heist - Game Guide Today is a beautiful sunday at NSA . You are not one of the spies or any of those exciting job titles. Nope, your job consists mostly of developing webapps for small internal services in that big not-so-well-organized organization. And today is release day, so you and your team had to leave someone behind, just to monitor that everything goes well. Guess who drew the shortest straw, huh? Anyway. Here goes your sunday... And when you thought nothing really exciting would happen to you, you find this in your mailbox: You open it up and discover its content... INCREDIBLE. The REAL Edward Snowden needs your help. Quick, you find a way to establish secure communications with him (hey, come on, it's a game alright?!). Basically, he is seeking very important documents which are stored in a safe in the archive department. Going to the archive department is no trouble at all since you have a high-enough security clearance to access it. The only problem is that the safe needs SC level 6 to open... And you're only SC 4. Fortunately, Edward has managed to get his hands on the briefcase of one of the SC 6 employees. You know that tomorrow, the employee will probably report its loss so your window of action is well... Now. You only have a couple hours to find a way to open the briefcase and go open the safe. Before your Start Install Arduino Make sure Arduino is installed on your computer https://www.arduino.cc/en/main/software Install ESP32 Espressif using Arduino IDE Boards Manager Stable release link: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Development release link: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json Start Arduino and open Preferences window. Enter one of the release links above into Additional Board Manager URLs field. You can add multiple URLs, separating them with commas. Open Boards Manager from Tools > Board menu and install esp32 platform (and don't forget to select your ESP32 board from Tools > Board menu after installation). Restart Arduino Clone this repository git clone https://github.com/resourcepool/the-heist Add Arduino libraries Copy the content of the libraries directory to your Arduino/libraries folder. * Windows: should be in My Documents/Arduino/libraries * Linux: should be in the libraries subfolder of wherever you placed arduino * Mac OS: should be in the Documents/Arduino/libraries folder Restart Arduino IDE. Linux Additionally, if you are on Linux you need to follow theses extra steps : * install pyserial with pip & python3 : * if pip is not installed : sudo apt install python-is-python3 * installez pyserial pip install pyserial * enter the following command and reboot your computer: sudo usermod -aG dialout $USER Game start Go ahead and browse to the right game section. Start with chapter one . Open the briefcase Chapter one steps are available here Surprise surprise Chapter two steps are available here","title":"Game Briefing"},{"location":"#the-heist-game-guide","text":"Today is a beautiful sunday at NSA . You are not one of the spies or any of those exciting job titles. Nope, your job consists mostly of developing webapps for small internal services in that big not-so-well-organized organization. And today is release day, so you and your team had to leave someone behind, just to monitor that everything goes well. Guess who drew the shortest straw, huh? Anyway. Here goes your sunday... And when you thought nothing really exciting would happen to you, you find this in your mailbox: You open it up and discover its content... INCREDIBLE. The REAL Edward Snowden needs your help. Quick, you find a way to establish secure communications with him (hey, come on, it's a game alright?!). Basically, he is seeking very important documents which are stored in a safe in the archive department. Going to the archive department is no trouble at all since you have a high-enough security clearance to access it. The only problem is that the safe needs SC level 6 to open... And you're only SC 4. Fortunately, Edward has managed to get his hands on the briefcase of one of the SC 6 employees. You know that tomorrow, the employee will probably report its loss so your window of action is well... Now. You only have a couple hours to find a way to open the briefcase and go open the safe.","title":"The-Heist - Game Guide"},{"location":"#before-your-start","text":"","title":"Before your Start"},{"location":"#install-arduino","text":"Make sure Arduino is installed on your computer https://www.arduino.cc/en/main/software","title":"Install Arduino"},{"location":"#install-esp32-espressif-using-arduino-ide-boards-manager","text":"Stable release link: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_index.json Development release link: https://raw.githubusercontent.com/espressif/arduino-esp32/gh-pages/package_esp32_dev_index.json Start Arduino and open Preferences window. Enter one of the release links above into Additional Board Manager URLs field. You can add multiple URLs, separating them with commas. Open Boards Manager from Tools > Board menu and install esp32 platform (and don't forget to select your ESP32 board from Tools > Board menu after installation). Restart Arduino","title":"Install ESP32 Espressif using Arduino IDE Boards Manager"},{"location":"#clone-this-repository","text":"git clone https://github.com/resourcepool/the-heist","title":"Clone this repository"},{"location":"#add-arduino-libraries","text":"Copy the content of the libraries directory to your Arduino/libraries folder. * Windows: should be in My Documents/Arduino/libraries * Linux: should be in the libraries subfolder of wherever you placed arduino * Mac OS: should be in the Documents/Arduino/libraries folder Restart Arduino IDE.","title":"Add Arduino libraries"},{"location":"#linux","text":"Additionally, if you are on Linux you need to follow theses extra steps : * install pyserial with pip & python3 : * if pip is not installed : sudo apt install python-is-python3 * installez pyserial pip install pyserial * enter the following command and reboot your computer: sudo usermod -aG dialout $USER","title":"Linux"},{"location":"#game-start","text":"Go ahead and browse to the right game section. Start with chapter one . Open the briefcase Chapter one steps are available here Surprise surprise Chapter two steps are available here","title":"Game start"},{"location":"about/","text":"About Us The Dev Team Lo\u00efc, Antoine and Fran\u00e7ois have been working together for a few years at Takima. Although they work on different topics on a daily basis, they all like driving themselves beyond their comfort zone. Most developers are good at web programming, and we get better at doing large-scale architectures every day. Thanks to technology, we are adding layers of abstraction that allows us to develop faster. The tradeoffs of this is that people get disconnected from the low-level universe. It is very common to see websites with huge JS payloads, and it is sad to see how bad developers handle bandwidth. We wanted through this workshop to reconnect you with this world. The Sponsors Takima has been supporting us and gave us company time to work on this project. They also provided support and coaching for the content itself and speaker-preparation. It is an awesome company, you should look it up and try to join us :)","title":"About"},{"location":"about/#about-us","text":"","title":"About Us"},{"location":"about/#the-dev-team","text":"Lo\u00efc, Antoine and Fran\u00e7ois have been working together for a few years at Takima. Although they work on different topics on a daily basis, they all like driving themselves beyond their comfort zone. Most developers are good at web programming, and we get better at doing large-scale architectures every day. Thanks to technology, we are adding layers of abstraction that allows us to develop faster. The tradeoffs of this is that people get disconnected from the low-level universe. It is very common to see websites with huge JS payloads, and it is sad to see how bad developers handle bandwidth. We wanted through this workshop to reconnect you with this world.","title":"The Dev Team"},{"location":"about/#the-sponsors","text":"Takima has been supporting us and gave us company time to work on this project. They also provided support and coaching for the content itself and speaker-preparation. It is an awesome company, you should look it up and try to join us :)","title":"The Sponsors"},{"location":"ch1-open-briefcase/","text":"Chapter 1: Opening the briefcase Briefing You got your hands on the stolen briefcase (Thank you, whoever you are SC 6 employee!). Problem is, the briefcase is locked up, and it's a keypad briefcase! Here's how it works: * You need to enter a 4-digits code, and validate by pushing star . * After the right code is entered, you have 30 seconds to enter the second code , and validate by star . Fortunately, the briefcases have two design flaws: * Hardware flaw: The keypad connectors are external * Software flaw: There is no wait-before-retry logic implemented on the briefcase system. Main Goal You need to find a way to open this briefcase, and Edward also gave you a hacking program written for ESP-32 microcontrolers. You have no idea what a microcontroller is nor how to program this device, but you'll have to find a way. Step 1.1 - Briefcase wiring In order to connect to the briefcase, you need to wire your microcontroller to replace the keypad... Fortunately, edward also found you some docs. Hopefully those docs can help you. Step 1.2 - Flashing your Arduino Device The program we gave you (in the /hacker directory of your repository) is an Arduino project. Once you have setup Arduino, you should be able to flash the device. By default, every Arduino Device contains a program. In order to flash it, you need to reset it into Bootloader mode each time you want to flash. To do this, follow the following steps: * Push and hold the EN button (it means \"ENABLE\"). * Push and hold the BOOT button (it means \"BOOTLOADER\"). * Release the EN button. When you release the EN button, the device will reboot. * After 1 second, release the BOOTLOADER button The program Edward gave you is a hacker-tool designed to provide many different utilities for hardware-hacking. The good thing about it is that the shell is already working, and that you will just have to fill-in the blanks! The program can be accessed using a Serial Monitor. To open your Serial Monitor Step 1.3 - Coding You need to implement the method BruteForceService::simulateButtonPressed . You can test it by launching the command Step 2 - Briefcase bruteforce Now that you know the wiring works, you will need to perform a bruteforce attack on the pins. Here are the main things you need to understand about the algorithm you will write: * You need to simulate fingers going over a keypad. Fingers go one digit at a time. * Between presses, keypads need to get back to the steady state where no key is pressed. * After entering 4 digits, you need to push * to validate the password. * If the password is wrong, you will carry-on with the next password. If the password is right, you should stop entering digits. Remember: Once the PIN is found, you should stop entering digits. If you miss a cycle, PINs will change automatically (generated randomly). When you will have found the right pin, the briefcase will be open for 30 seconds. Don't miss this timeframe!","title":"Chapter 1"},{"location":"ch1-open-briefcase/#chapter-1-opening-the-briefcase","text":"","title":"Chapter 1: Opening the briefcase"},{"location":"ch1-open-briefcase/#briefing","text":"You got your hands on the stolen briefcase (Thank you, whoever you are SC 6 employee!). Problem is, the briefcase is locked up, and it's a keypad briefcase! Here's how it works: * You need to enter a 4-digits code, and validate by pushing star . * After the right code is entered, you have 30 seconds to enter the second code , and validate by star . Fortunately, the briefcases have two design flaws: * Hardware flaw: The keypad connectors are external * Software flaw: There is no wait-before-retry logic implemented on the briefcase system.","title":"Briefing"},{"location":"ch1-open-briefcase/#main-goal","text":"You need to find a way to open this briefcase, and Edward also gave you a hacking program written for ESP-32 microcontrolers. You have no idea what a microcontroller is nor how to program this device, but you'll have to find a way.","title":"Main Goal"},{"location":"ch1-open-briefcase/#step-11-briefcase-wiring","text":"In order to connect to the briefcase, you need to wire your microcontroller to replace the keypad... Fortunately, edward also found you some docs. Hopefully those docs can help you.","title":"Step 1.1 - Briefcase wiring"},{"location":"ch1-open-briefcase/#step-12-flashing-your-arduino-device","text":"The program we gave you (in the /hacker directory of your repository) is an Arduino project. Once you have setup Arduino, you should be able to flash the device. By default, every Arduino Device contains a program. In order to flash it, you need to reset it into Bootloader mode each time you want to flash. To do this, follow the following steps: * Push and hold the EN button (it means \"ENABLE\"). * Push and hold the BOOT button (it means \"BOOTLOADER\"). * Release the EN button. When you release the EN button, the device will reboot. * After 1 second, release the BOOTLOADER button The program Edward gave you is a hacker-tool designed to provide many different utilities for hardware-hacking. The good thing about it is that the shell is already working, and that you will just have to fill-in the blanks! The program can be accessed using a Serial Monitor. To open your Serial Monitor","title":"Step 1.2 - Flashing your Arduino Device"},{"location":"ch1-open-briefcase/#step-13-coding","text":"You need to implement the method BruteForceService::simulateButtonPressed . You can test it by launching the command","title":"Step 1.3 - Coding"},{"location":"ch1-open-briefcase/#step-2-briefcase-bruteforce","text":"Now that you know the wiring works, you will need to perform a bruteforce attack on the pins. Here are the main things you need to understand about the algorithm you will write: * You need to simulate fingers going over a keypad. Fingers go one digit at a time. * Between presses, keypads need to get back to the steady state where no key is pressed. * After entering 4 digits, you need to push * to validate the password. * If the password is wrong, you will carry-on with the next password. If the password is right, you should stop entering digits. Remember: Once the PIN is found, you should stop entering digits. If you miss a cycle, PINs will change automatically (generated randomly). When you will have found the right pin, the briefcase will be open for 30 seconds. Don't miss this timeframe!","title":"Step 2 - Briefcase bruteforce"},{"location":"ch2-surprise-surprise/","text":"Chapter 2: Surprise Surprise Briefing Congratulations, you managed to open the briefcase. Inside will be lots of documents, some interesting, some completely useless. Ohh wait. There's a badge! Quick, hurry-up and try to login onto the safe... What? It didn't work?... Hmmm. Damn! The intel was wrong. The employee whose briefcase was stolen is only a SC 3... Remember, you need to be Security Clearance level 4 or above in order to get access to the content of the safe. You'll need to find another way. Step 1 - NFC Reader Wiring The employee badge is a MiFARE Classic 1K card. Your first job is to wire the NFC-Reader (PN-532) to the Arduino and make it able to detect the card. Just so you know, the Arduino uses a SPI Connection in order to communicate with the reader. Hint: Everything should be written on the card itself, if you can't read it well, look into the Datasheet in your docs ;) Step 2 - Find the right info, write it on the NFC-card, open the safe About the MEDUSA network The auth network is available on a wireless connection, with a hidden SSID. By scanning the available WiFi Networks with airmon-ng , we can easily determine which one it is. Then, using aircrack-ng or wifite or any cracking software, we managed to crack it! Great: here are the credentials: SSID: MEDUSA Key: E0E9542D44 After sniffing around, we found ARP requests going to 192.168.1.2 ... Could this be our auth server? A quick portscan indicates ports 80 and 8080 are both listening on that IP... Seems that we're onto something. Why don't you go check with your browser what's on http://192.168.1.2 Don't forget we're looking for someone with SC 4 and above... Hint: Now may be the time to take a look on all those files in your briefcase... Hint 2 : You may need to use a tool to convert some data... visit \"/tools\" page of the website Understanding all data stored on the badge We have taught you to understand the data stored on the badge. You understand how memory is organized and how TLV payloads are encoded. (if you don't remember, we have provided you with the official documentation of MiFARE!) What could help is to understand how data is encoded on the card. Remember: Only the Employee UUID and Last Login Timestamp are to be changed. For reference : * a UUID is encoded on 16-bytes, 2 characters per byte (should not require any specific encoding) * a String encoded in ASCII takes only one byte per character * a Timestamp can be encoded on 4 or 8 bytes. Timestamp of 4 bytes for January 1st 2020 12:00 AM is 0x5E0BD2F0 in Hex, 1577833200 in decimal (epoch seconds) In our case, you can consider that the timestamp is written as little-endian . Becoming SC 4 If you found the right data by hacking on the website, and understood which blocks you should change on sector 3, you only need to manually write the blocks using your microcontroller interface. The command should be nfc-write , don't forget to initialize the NFC Reader by using the nfc-en command Let's crack this safe!","title":"Chapter 2"},{"location":"ch2-surprise-surprise/#chapter-2-surprise-surprise","text":"","title":"Chapter 2: Surprise Surprise"},{"location":"ch2-surprise-surprise/#briefing","text":"Congratulations, you managed to open the briefcase. Inside will be lots of documents, some interesting, some completely useless. Ohh wait. There's a badge! Quick, hurry-up and try to login onto the safe... What? It didn't work?... Hmmm. Damn! The intel was wrong. The employee whose briefcase was stolen is only a SC 3... Remember, you need to be Security Clearance level 4 or above in order to get access to the content of the safe. You'll need to find another way.","title":"Briefing"},{"location":"ch2-surprise-surprise/#step-1-nfc-reader-wiring","text":"The employee badge is a MiFARE Classic 1K card. Your first job is to wire the NFC-Reader (PN-532) to the Arduino and make it able to detect the card. Just so you know, the Arduino uses a SPI Connection in order to communicate with the reader. Hint: Everything should be written on the card itself, if you can't read it well, look into the Datasheet in your docs ;)","title":"Step 1 - NFC Reader Wiring"},{"location":"ch2-surprise-surprise/#step-2-find-the-right-info-write-it-on-the-nfc-card-open-the-safe","text":"","title":"Step 2 - Find the right info, write it on the NFC-card, open the safe"},{"location":"ch2-surprise-surprise/#about-the-medusa-network","text":"The auth network is available on a wireless connection, with a hidden SSID. By scanning the available WiFi Networks with airmon-ng , we can easily determine which one it is. Then, using aircrack-ng or wifite or any cracking software, we managed to crack it! Great: here are the credentials: SSID: MEDUSA Key: E0E9542D44 After sniffing around, we found ARP requests going to 192.168.1.2 ... Could this be our auth server? A quick portscan indicates ports 80 and 8080 are both listening on that IP... Seems that we're onto something. Why don't you go check with your browser what's on http://192.168.1.2 Don't forget we're looking for someone with SC 4 and above... Hint: Now may be the time to take a look on all those files in your briefcase... Hint 2 : You may need to use a tool to convert some data... visit \"/tools\" page of the website","title":"About the MEDUSA network"},{"location":"ch2-surprise-surprise/#understanding-all-data-stored-on-the-badge","text":"We have taught you to understand the data stored on the badge. You understand how memory is organized and how TLV payloads are encoded. (if you don't remember, we have provided you with the official documentation of MiFARE!) What could help is to understand how data is encoded on the card. Remember: Only the Employee UUID and Last Login Timestamp are to be changed. For reference : * a UUID is encoded on 16-bytes, 2 characters per byte (should not require any specific encoding) * a String encoded in ASCII takes only one byte per character * a Timestamp can be encoded on 4 or 8 bytes. Timestamp of 4 bytes for January 1st 2020 12:00 AM is 0x5E0BD2F0 in Hex, 1577833200 in decimal (epoch seconds) In our case, you can consider that the timestamp is written as little-endian .","title":"Understanding all data stored on the badge"},{"location":"ch2-surprise-surprise/#becoming-sc-4","text":"If you found the right data by hacking on the website, and understood which blocks you should change on sector 3, you only need to manually write the blocks using your microcontroller interface. The command should be nfc-write , don't forget to initialize the NFC Reader by using the nfc-en command Let's crack this safe!","title":"Becoming SC 4"}]}